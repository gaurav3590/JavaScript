"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("@entity-core/uuid");
class Context {
    constructor({ dataSource, tenantID = 1, uuidGenerator = uuid_1.nanoid, }) {
        this.dbClient = null;
        this.dataSource = dataSource;
        this.tenantID = tenantID;
        this.uuidGenerator = uuidGenerator;
    }
    getTenantID() {
        return this.tenantID;
    }
    setTenantID(tenantID) {
        this.tenantID = tenantID;
    }
    uuid() {
        return this.uuidGenerator();
    }
    getDB() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dbClient === null) {
                this.dbClient = yield this.dataSource.getClient();
            }
            return this.dbClient;
        });
    }
    end() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dbClient !== null) {
                this.dbClient.release();
            }
        });
    }
}
exports.default = Context;
//# sourceMappingURL=Context.js.map