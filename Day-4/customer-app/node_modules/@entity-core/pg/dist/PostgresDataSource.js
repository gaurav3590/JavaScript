"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("pg");
const datasource_1 = require("@entity-core/datasource");
const PostgresClient_1 = __importDefault(require("./PostgresClient"));
class PostgresDataSource extends datasource_1.DataSource {
    constructor({ poolConfig, tablePrefix = ``, }) {
        super();
        this.pool = null;
        this.poolConfig = poolConfig;
        this.tablePrefix = tablePrefix;
        this.clients = [];
    }
    createPool() {
        return new pg_1.Pool(this.poolConfig);
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            this.pool = this.createPool();
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.clients.map((c) => c.release()));
            if (this.pool !== null) {
                yield this.pool.end();
                this.pool = null;
            }
        });
    }
    getClient() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.pool === null) {
                yield this.connect();
            }
            const poolClient = yield this.pool.connect();
            const client = new PostgresClient_1.default(poolClient, this);
            this.registerClient(client);
            return client;
        });
    }
    registerClient(client) {
        this.clients.push(client);
    }
    deregisterClient(client) {
        this.clients = this.clients.filter((c) => c !== client);
    }
}
exports.default = PostgresDataSource;
//# sourceMappingURL=PostgresDataSource.js.map