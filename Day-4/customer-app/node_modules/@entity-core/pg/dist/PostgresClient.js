"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_1 = require("@entity-core/datasource");
class PostgresClient extends datasource_1.Client {
    constructor(poolClient, dataSource) {
        super();
        this.poolClient = poolClient;
        this.dataSource = dataSource;
    }
    query(query, variables) {
        if (this.poolClient === null) {
            throw new Error(`Unable to perform query as the client has already been released`);
        }
        return this.poolClient.query(query, variables);
    }
    release() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.poolClient !== null) {
                this.dataSource.deregisterClient(this);
                this.poolClient.release();
                this.poolClient = null;
            }
        });
    }
    on(event, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
}
exports.default = PostgresClient;
//# sourceMappingURL=PostgresClient.js.map