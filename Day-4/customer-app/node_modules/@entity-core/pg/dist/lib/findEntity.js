"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
function findEntity({ context, props, type, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const table = dataSource.tablePrefix + `entity`;
        const tenantID = context.getTenantID();
        let query = sql_template_strings_1.default `
        SELECT * FROM "`.append(table).append(sql_template_strings_1.default `"
        WHERE tenant_id = ${tenantID}
          AND entity_type = ${type} `);
        Object.keys(props).forEach((field) => {
            const value = props[field];
            if (value === null) {
                query = query.append(`AND props->>'${field}' is null `);
            }
            else {
                query = query
                    .append(`AND props->>'${field}' = `)
                    .append(sql_template_strings_1.default `${value} `);
            }
        });
        query = query.append(sql_template_strings_1.default `
        LIMIT 1
    `);
        const { rows: [row = null], } = yield client.query(query);
        if (row === null) {
            return null;
        }
        return {
            id: row.id,
            type: row.entity_type,
            uuid: row.uuid,
            props: row.props,
        };
    });
}
exports.default = findEntity;
//# sourceMappingURL=findEntity.js.map