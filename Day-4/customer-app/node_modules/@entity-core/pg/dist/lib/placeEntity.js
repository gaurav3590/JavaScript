"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
const getPreviousSiblingID_1 = __importDefault(require("./getPreviousSiblingID"));
const getNextSiblingID_1 = __importDefault(require("./getNextSiblingID"));
const getSiblings_1 = __importDefault(require("./getSiblings"));
const getParents_1 = __importDefault(require("./getParents"));
function detachChild({ context, id, type, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const tenantID = context.getTenantID();
        const table = dataSource.tablePrefix + `entity`;
        const oldPreviousID = yield getPreviousSiblingID_1.default({
            context,
            type,
            id,
            _lock: true,
        });
        const oldNextID = yield getNextSiblingID_1.default({
            context,
            type,
            id,
            _lock: true,
        });
        if (oldNextID !== null) {
            yield client.query(sql_template_strings_1.default `
                UPDATE "`.append(table).append(sql_template_strings_1.default `"
                SET previous = ${oldPreviousID}
                WHERE tenant_id = ${tenantID}
                AND entity_type = ${type}
                AND id = ${oldNextID}
            `));
        }
        else {
            yield client.query(sql_template_strings_1.default `
                UPDATE "`.append(table).append(sql_template_strings_1.default `"
                SET parent = null, parent_type = null, previous = null
                WHERE tenant_id = ${tenantID}
                AND entity_type = ${type}
                AND id = ${id}
            `));
        }
    });
}
function attachChild({ context, id, type, siblings, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const table = dataSource.tablePrefix + `entity`;
        const tenantID = context.getTenantID();
        yield client.query(sql_template_strings_1.default `
            UPDATE "`.append(table).append(sql_template_strings_1.default `"
            SET parent = ${siblings.parentID},
                parent_type = ${siblings.parentType},
                previous = ${siblings.previousSiblingID}
            WHERE tenant_id = ${tenantID}
            AND entity_type = ${type}
            AND id = ${id}
        `));
        if (siblings.nextSiblingID !== null) {
            yield client.query(sql_template_strings_1.default `
                UPDATE "`.append(table).append(sql_template_strings_1.default `"
                SET previous = ${id}
                WHERE tenant_id = ${tenantID}
                AND entity_type = ${type}
                AND id = ${siblings.nextSiblingID}
            `));
        }
    });
}
function placeEntity({ context, id, type, placement, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (id === placement.entityID) {
            throw new Error(`Entity cannot be placed as a child or sibling of itself`);
        }
        const parents = yield getParents_1.default({
            context,
            id: placement.entityID,
            type: placement.entityType,
        });
        if (parents.findIndex((parent) => parent.id === id) !== -1) {
            throw new Error(`Child cannot also be a parent or grandparent`);
        }
        const siblings = yield getSiblings_1.default({
            context,
            childEntityID: id,
            childEntityType: type,
            placement,
            _lock: true,
        });
        yield detachChild({ context, id, type });
        yield attachChild({ context, id, type, siblings });
    });
}
exports.default = placeEntity;
//# sourceMappingURL=placeEntity.js.map