"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
function getChildren({ context, parentID, parentType = null, childType = null, fromID = null, limit = 10, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const table = dataSource.tablePrefix + `entity`;
        const tenantID = context.getTenantID();
        const query = sql_template_strings_1.default `
        WITH RECURSIVE ent AS (
            -- Get our first element
            SELECT *, 1 as index
            FROM "`.append(table).append(sql_template_strings_1.default `"
            WHERE tenant_id = ${tenantID}
                AND entity_type = ${childType}
                AND parent = ${parentID}
                AND parent_type = ${parentType}
            `);
        if (fromID === null) {
            query.append(sql_template_strings_1.default `AND previous IS NULL`);
        }
        else {
            query.append(sql_template_strings_1.default `AND previous = ${fromID}`);
        }
        query.append(sql_template_strings_1.default `
        UNION
            SELECT
                e.*, ent.index + 1 as index
            FROM
                "`.append(table).append(sql_template_strings_1.default `" e
            INNER JOIN ent ON (
                    ent.tenant_id = e.tenant_id
                AND ent.entity_type = e.entity_type
                AND ent.id = e.previous
                AND ent.parent = e.parent
                AND ent.parent_type = e.parent_type
                AND ent.index < ${limit}
            )
    )
    SELECT * FROM ent 
    ORDER BY ent.index
    LIMIT ${limit}
    `));
        const { rows } = yield client.query(query);
        return rows.map((row) => ({
            id: row.id,
            type: row.entity_type,
            uuid: row.uuid,
            props: row.props,
        }));
    });
}
exports.default = getChildren;
//# sourceMappingURL=getChildren.js.map