"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
const getRelationshipPreviousSibling_1 = __importDefault(require("./getRelationshipPreviousSibling"));
const getRelationshipNextSibling_1 = __importDefault(require("./getRelationshipNextSibling"));
function unrelateEntity({ context, relationship, sourceEntityID, sourceEntityType, targetEntityID, targetEntityType, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const entityRelTable = dataSource.tablePrefix + `relationship`;
        const tenantID = context.getTenantID();
        const oldPrevious = yield getRelationshipPreviousSibling_1.default({
            context,
            relationship,
            fromID: sourceEntityID,
            fromType: sourceEntityType,
            entityType: targetEntityType,
            entityID: targetEntityID,
            _lock: true,
        });
        const oldNext = yield getRelationshipNextSibling_1.default({
            context,
            relationship,
            fromID: sourceEntityID,
            fromType: sourceEntityType,
            entityID: targetEntityID,
            entityType: targetEntityType,
            _lock: true,
        });
        if (oldNext !== null) {
            yield client.query(sql_template_strings_1.default `
            UPDATE "`.append(entityRelTable).append(sql_template_strings_1.default `"
               SET previous = ${oldPrevious ? oldPrevious.id : null},
                   previous_type = ${oldPrevious ? oldPrevious.type : null}
             WHERE tenant_id = ${tenantID}
               AND name = ${relationship}
               AND from_id = ${sourceEntityID}
               AND from_type = ${sourceEntityType}
               AND to_id = ${oldNext.id}
               AND to_type = ${oldNext.type}
        `));
        }
        yield client.query(sql_template_strings_1.default `
        DELETE
          FROM "`.append(entityRelTable).append(sql_template_strings_1.default `"
         WHERE tenant_id = ${tenantID}
           AND name = ${relationship}
           AND from_id = ${sourceEntityID}
           AND from_type = ${sourceEntityType}
           AND to_id = ${targetEntityID}
           AND to_type = ${targetEntityType}
    `));
    });
}
exports.default = unrelateEntity;
//# sourceMappingURL=unrelateEntity.js.map