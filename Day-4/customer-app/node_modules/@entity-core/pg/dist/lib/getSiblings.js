"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getPreviousSiblingID_1 = __importDefault(require("./getPreviousSiblingID"));
const getNextSiblingID_1 = __importDefault(require("./getNextSiblingID"));
const getLastChildID_1 = __importDefault(require("./getLastChildID"));
const getEntityParent_1 = __importDefault(require("./getEntityParent"));
function getSiblings({ context, childEntityID = null, childEntityType, placement = null, _lock = false, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (placement === null) {
            return {
                parentID: null,
                parentType: null,
                previousSiblingID: null,
                nextSiblingID: null,
            };
        }
        let parentID;
        let parentType;
        let previousSiblingID = null;
        let nextSiblingID = null;
        if (placement.type === `child`) {
            parentID = placement.entityID;
            parentType = placement.entityType;
            previousSiblingID = yield getLastChildID_1.default({
                context,
                parentID,
                parentType,
                childEntityType,
                _lock,
            });
            if (previousSiblingID === childEntityID) {
                previousSiblingID = null;
            }
        }
        else {
            const parent = yield getEntityParent_1.default({
                context,
                id: placement.entityID,
                type: placement.entityType,
            });
            if (parent === null) {
                throw new Error(`Unable to find sibling entity of matching type`);
            }
            parentID = parent.id;
            parentType = parent.type;
            if (placement.type === `before`) {
                previousSiblingID = yield getPreviousSiblingID_1.default({
                    context,
                    id: placement.entityID,
                    type: placement.entityType,
                    _lock,
                });
                nextSiblingID = placement.entityID;
            }
            else if (placement.type === `after`) {
                nextSiblingID = yield getNextSiblingID_1.default({
                    context,
                    id: placement.entityID,
                    type: placement.entityType,
                    _lock,
                });
                previousSiblingID = placement.entityID;
            }
        }
        return {
            parentID,
            parentType,
            previousSiblingID,
            nextSiblingID,
        };
    });
}
exports.default = getSiblings;
//# sourceMappingURL=getSiblings.js.map