"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
function getEntities({ context, entities, limit = null, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (entities.length === 0) {
            return [];
        }
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const table = dataSource.tablePrefix + `entity`;
        const tenantID = context.getTenantID();
        const query = sql_template_strings_1.default `
        -- Select all the fields from the entity table
        SELECT e.*
        FROM "`.append(table).append(sql_template_strings_1.default `" e
        -- Now join it with our arbitary list of id+type key plus the order we want them in
        INNER JOIN
        UNNEST(
            ${entities.map((e) => e.id)}::int[],
            ${entities.map((e) => e.type)}::text[],
            ${entities.map((e, i) => i)}::int[]
        ) AS list (id, entity_type, sortIndex)
        -- Join them on the entity id and entity type
        ON (
                e.id = list.id
            AND e.entity_type = list.entity_type 
        )
        WHERE e.tenant_id = ${tenantID}
        -- Now preserve our ordering by using the sortIndex values
        ORDER BY sortIndex
    `);
        if (limit !== null) {
            query.append(sql_template_strings_1.default `LIMIT ${limit}`);
        }
        const { rows } = yield client.query(query);
        return rows.map((row) => ({
            id: row.id,
            type: row.entity_type,
            uuid: row.uuid,
            props: row.props,
        }));
    });
}
exports.default = getEntities;
//# sourceMappingURL=getEntities.js.map