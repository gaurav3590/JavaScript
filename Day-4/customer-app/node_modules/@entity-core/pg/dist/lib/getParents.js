"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
function getParents({ context, id, type, limit = 100, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const table = dataSource.tablePrefix + `entity`;
        const tenantID = context.getTenantID();
        const query = sql_template_strings_1.default `
        WITH RECURSIVE search_parents(tenant_id, id, entity_type, parent, parent_type, depth) AS (
            SELECT e.tenant_id, e.id, e.entity_type, e.parent, e.parent_type, 1 as depth
            FROM "`
            .append(table)
            .append(sql_template_strings_1.default `" e
            UNION ALL
                SELECT e.tenant_id, e.id, e.entity_type, sp.parent, sp.parent_type, sp.depth + 1
                FROM "`.append(table).append(sql_template_strings_1.default `" e, search_parents sp
                WHERE e.tenant_id = sp.tenant_id AND e.parent = sp.id AND e.parent_type = sp.entity_type
        )
        SELECT parent, parent_type from search_parents
        WHERE tenant_id = ${tenantID} AND id = ${id} AND entity_type = ${type}
        AND parent is not null -- Exclude the root node as we'll get the details from the immediate child
        LIMIT ${limit};
    `));
        const { rows } = yield client.query(query);
        return rows.map((row) => ({
            id: row.parent,
            type: row.parent_type,
        }));
    });
}
exports.default = getParents;
//# sourceMappingURL=getParents.js.map