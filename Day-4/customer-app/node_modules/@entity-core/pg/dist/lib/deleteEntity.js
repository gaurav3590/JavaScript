"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
const getChildren_1 = __importDefault(require("./getChildren"));
const unrelateEntity_1 = __importDefault(require("./unrelateEntity"));
const getParent_1 = __importDefault(require("./getParent"));
const removeChildEntity_1 = __importDefault(require("./removeChildEntity"));
function _deleteEntity({ context, id, type, isChild, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const client = (yield context.getDB());
        const entityTable = dataSource.tablePrefix + `entity`;
        const entityRelTable = dataSource.tablePrefix + `relationship`;
        const tenantID = context.getTenantID();
        const { rows: childRows } = yield client.query(sql_template_strings_1.default `
        SELECT DISTINCT entity_type FROM "`.append(entityTable).append(sql_template_strings_1.default `"
         WHERE tenant_id = ${tenantID}
           AND parent = ${id}
           AND parent_type = ${type}
    `));
        for (let i = 0; i < childRows.length; i += 1) {
            const childType = childRows[i].entity_type;
            let fromID = null;
            let children = null;
            do {
                children = yield getChildren_1.default({
                    context,
                    parentID: id,
                    parentType: type,
                    childType,
                    fromID,
                    limit: 100,
                });
                if (children.length > 0) {
                    for (let j = 0; j < children.length; j += 1) {
                        yield _deleteEntity({
                            context,
                            id: children[j].id,
                            type: childType,
                            isChild: true,
                        });
                    }
                    fromID = children[children.length - 1].id;
                }
            } while (children.length === 100);
        }
        const { rows: inboundRows } = yield client.query(sql_template_strings_1.default `
        SELECT
            name,
            from_id,
            from_type
        FROM "`.append(entityRelTable).append(sql_template_strings_1.default `"
        WHERE to_id = ${id}
          AND to_type = ${type}
          AND tenant_id = ${tenantID}
    `));
        for (let i = 0; i < inboundRows.length; i += 1) {
            const record = inboundRows[i];
            yield unrelateEntity_1.default({
                context,
                relationship: record.name,
                sourceEntityID: record.from_id,
                sourceEntityType: record.from_type,
                targetEntityID: id,
                targetEntityType: type,
            });
        }
        if (!isChild) {
            const parent = yield getParent_1.default({
                context,
                type,
                id,
            });
            if (parent !== null) {
                yield removeChildEntity_1.default({
                    context,
                    id: id,
                    type: type,
                });
            }
        }
        yield client.query(sql_template_strings_1.default `
        DELETE FROM "`.append(entityTable).append(sql_template_strings_1.default `"
         WHERE tenant_id = ${tenantID}
           AND entity_type = ${type}
           AND id = ${id}
    `));
    });
}
function deleteEntity({ context, id, type, }) {
    return _deleteEntity({ context, id, type, isChild: false });
}
exports.default = deleteEntity;
//# sourceMappingURL=deleteEntity.js.map