"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sql_template_strings_1 = __importDefault(require("sql-template-strings"));
const getSiblings_1 = __importDefault(require("./getSiblings"));
function createEntity({ context, entity, placement = null, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const dataSource = context.dataSource;
        const table = dataSource.tablePrefix + `entity`;
        const client = (yield context.getDB());
        const tenantID = context.getTenantID();
        const uuid = entity.uuid || context.uuid();
        const siblings = yield getSiblings_1.default({
            context,
            childEntityType: entity.type,
            placement,
            _lock: true,
        });
        const query = sql_template_strings_1.default `
        INSERT INTO "`.append(table).append(sql_template_strings_1.default `"
        (tenant_id, entity_type, uuid, props, parent, parent_type, previous)
        VALUES
        (${tenantID}, ${entity.type}, ${uuid}, ${entity.props || null}, ${siblings.parentID}, ${siblings.parentType}, ${siblings.previousSiblingID})
        RETURNING *
    `);
        const result = yield client.query(query);
        if (result.rows.length !== 1) {
            throw new Error(`Unable to create entity, expected 1 result but received ${result.rows.length}`);
        }
        const record = result.rows[0];
        if (siblings.nextSiblingID !== null) {
            yield client.query(sql_template_strings_1.default `
                    UPDATE "`.append(table).append(sql_template_strings_1.default `"
                    SET previous = ${record.id}
                    WHERE tenant_id = ${tenantID}
                    AND entity_type = ${record.entity_type}
                    AND id = ${siblings.nextSiblingID}
                `));
        }
        const outputEntity = {
            id: record.id,
            type: record.entity_type,
            uuid: record.uuid,
            props: record.props,
        };
        return outputEntity;
    });
}
exports.default = createEntity;
//# sourceMappingURL=createEntity.js.map